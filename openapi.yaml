openapi: 3.0.2
info:
  title: WhatsApp Multi‑Session API
  version: 1.0.0
  description: |
    This API exposes the full functionality of the **whatsapp‑web.js** library through
    a modular server running on Node.js.  It manages multiple sessions (up to a
    configurable limit), persists authentication on disk, supports real‑time
    event delivery over WebSockets and HTTP callbacks, and mirrors every method
    available on the underlying Client class via the generic `/invoke` endpoint.

    A session represents an authenticated WhatsApp account.  Each session
    maintains its own Puppeteer instance and storage under `.wwebjs_auth/{sessionId}`.
    On server start all existing sessions are restored automatically.

    ## Authentication

    WhatsApp requires scanning a QR code to link each session.  Create a session
    first via `POST /sessions` and then call `GET /sessions/{sessionId}/qr`
    repeatedly until a QR code is returned.  Scan the QR code with the mobile
    device linked to the WhatsApp account.  After authentication the session
    becomes ready and is able to send and receive messages.

    ## Real‑time events

    Connect to the WebSocket endpoint at `ws://<host>/ws?sessionId=<id>` to receive
    a stream of events for a session.  Events correspond to every event fired
    by the underlying whatsapp‑web.js Client (`message`, `ready`, `qr`,
    `group_update`, etc.).  Each message sent over the socket is a JSON
    structure with `sessionId`, `event` and `data` properties.

    Alternatively you can configure an HTTP callback for a session via
    `POST /sessions/{sessionId}/callback` by providing a URL and enabling it.
    When enabled, all events will be forwarded as `POST` requests to the
    specified URL with a JSON body identical to that used for WebSockets.

    ## Invocation of whatsapp‑web.js methods

    While convenience endpoints exist for common operations (such as sending
    messages), the `/invoke` endpoint provides a generic bridge to call any
    method on the underlying Client.  Pass the method name and an array of
    arguments and the server will invoke it.  Refer to the
    whatsapp‑web.js documentation for a comprehensive list of methods and
    parameters.

servers:
  - url: http://localhost:3000

paths:
  /sessions:
    get:
      summary: List all active sessions
      responses:
        '200':
          description: List of active session summaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SessionSummary'
    post:
      summary: Create a new session
      description: |
        Create a new WhatsApp session.  The request body can specify a
        custom `sessionId`.  If omitted a random UUID will be generated.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  type: string
                  description: Optional identifier for the session
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
        '400':
          description: Invalid request or the maximum number of sessions has been reached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{sessionId}:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
        description: Identifier of the session
    get:
      summary: Retrieve details for a session
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDetails'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Destroy a session
      description: |
        Destroys a session by shutting down its browser and clearing it from
        memory.  Authentication data on disk remains intact so the session can
        be recreated later.
      responses:
        '200':
          description: Session destroyed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{sessionId}/qr:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Retrieve the last QR code for a session
      description: Returns the most recently generated QR code for the session.  Only
        available while the session is unauthenticated.
      responses:
        '200':
          description: QR code available
          content:
            application/json:
              schema:
                type: object
                properties:
                  qr:
                    type: string
                    description: QR code string to be converted into a QR image
        '404':
          description: Session not found or no QR available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{sessionId}/callback:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Configure an event callback URL for a session
      description: |
        Configure or disable a callback URL.  When enabled, every event
        generated by the session will be delivered to the provided URL via
        HTTP POST with a JSON body containing `sessionId`, `event` and `data`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  nullable: true
                  description: Destination callback URL, or null to clear the existing URL
                enabled:
                  type: boolean
                  description: Whether callbacks should be sent
              required:
                - enabled
      responses:
        '200':
          description: Callback configured
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{sessionId}/send-message:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Send a message
      description: |
        Send a message to a chat using the specified session.  Supports text,
        media, locations, polls, contact cards, buttons and lists.  For
        media messages include a `media` object within `options` containing
        base64 encoded `data`, `mimetype` and an optional `filename`.  Additional
        message options are forwarded directly to whatsapp‑web.js.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ chatId, content ]
              properties:
                chatId:
                  type: string
                  description: Identifier of the chat (e.g. 123456789@c.us or group id)
                content:
                  oneOf:
                    - type: string
                      description: Text content to send
                    - $ref: '#/components/schemas/LocationContent'
                    - $ref: '#/components/schemas/PollContent'
                    - $ref: '#/components/schemas/ContactContent'
                    - $ref: '#/components/schemas/ButtonsContent'
                    - $ref: '#/components/schemas/ListContent'
                options:
                  type: object
                  description: Additional message send options as defined by whatsapp‑web.js
                  properties:
                    media:
                      $ref: '#/components/schemas/Media'
                    sendAudioAsVoice:
                      type: boolean
                      description: When sending audio, mark it as a voice note
                    linkPreview:
                      type: boolean
                      description: Disable link previews (default true)
                  additionalProperties: true
      responses:
        '200':
          description: Message successfully sent
          content:
            application/json:
              schema:
                type: object
                description: A simplified representation of the sent message
        '400':
          description: Error sending the message or the session is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{sessionId}/invoke:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Invoke an arbitrary Client method
      description: |
        Invoke a method on the underlying whatsapp‑web.js Client instance.  Specify
        the method name and an array of arguments.  Results are returned
        transparently.  Refer to the library documentation for supported
        methods and their signatures.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ method, args ]
              properties:
                method:
                  type: string
                  description: Name of the Client method to invoke
                args:
                  type: array
                  description: Arguments to pass to the method
                  items: { }
      responses:
        '200':
          description: Result of the invoked method
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid request or method invocation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{sessionId}/chats:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: List chats
      description: Returns a simplified list of chats known to the session.
      responses:
        '200':
          description: Array of chat summaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatSummary'
        '400':
          description: Session is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{sessionId}/contacts:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: List contacts
      responses:
        '200':
          description: Array of contact summaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactSummary'
        '400':
          description: Session is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{sessionId}/chat/{chatId}/messages:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: chatId
        in: path
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: false
        schema:
          type: integer
      - name: fromId
        in: query
        required: false
        schema:
          type: string
      - name: direction
        in: query
        required: false
        schema:
          type: string
          enum: [ before, after ]
    get:
      summary: Fetch chat messages
      description: |
        Fetch messages for a chat.  Optional query parameters mirror those
        supported by whatsapp‑web.js (`limit`, `fromId`, `direction`).  The
        returned objects contain basic properties of each message.
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageSummary'
        '400':
          description: Session is not ready or error fetching messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
    SessionSummary:
      type: object
      properties:
        id:
          type: string
        ready:
          type: boolean
        hasQr:
          type: boolean
        callbackUrl:
          type: string
          nullable: true
        callbackEnabled:
          type: boolean
        info:
          type: object
          nullable: true
          description: Contains metadata about the connected account when available
    SessionDetails:
      allOf:
        - $ref: '#/components/schemas/SessionSummary'
        - type: object
          properties:
            lastQr:
              type: string
              nullable: true
              description: Most recent QR code for authentication
    Media:
      type: object
      description: Base64 encoded media attachment
      properties:
        data:
          type: string
          description: Base64 encoded file data (without data URI prefix)
        mimetype:
          type: string
          description: MIME type of the file (e.g. image/png, audio/ogg)
        filename:
          type: string
          description: Optional filename for the attachment
    LocationContent:
      type: object
      required: [ latitude, longitude ]
      properties:
        latitude:
          type: number
        longitude:
          type: number
        name:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
    PollContent:
      type: object
      required: [ name, options ]
      properties:
        name:
          type: string
        options:
          type: array
          items:
            type: string
        extra:
          type: object
          nullable: true
    ContactContent:
      type: object
      required: [ phone ]
      properties:
        phone:
          type: string
          description: Phone number (international format)
    ButtonsContent:
      type: object
      required: [ body, buttons ]
      properties:
        body:
          type: string
        buttons:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              body: { type: string }
        title:
          type: string
          nullable: true
        footer:
          type: string
          nullable: true
    ListContent:
      type: object
      required: [ body, buttonText, sections ]
      properties:
        body:
          type: string
        buttonText:
          type: string
        sections:
          type: array
          items:
            type: object
            properties:
              title: { type: string, nullable: true }
              rows:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: string }
                    title: { type: string }
                    description: { type: string, nullable: true }
        title:
          type: string
          nullable: true
        footer:
          type: string
          nullable: true
    ChatSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          nullable: true
        isGroup:
          type: boolean
        isChannel:
          type: boolean
        timestamp:
          type: integer
          nullable: true
    ContactSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          nullable: true
        isGroup:
          type: boolean
        isBusiness:
          type: boolean
    MessageSummary:
      type: object
      properties:
        id:
          type: string
        from:
          type: string
          nullable: true
        to:
          type: string
          nullable: true
        author:
          type: string
          nullable: true
        body:
          type: string
          nullable: true
        type:
          type: string
        timestamp:
          type: integer
        fromMe:
          type: boolean
        hasMedia:
          type: boolean